********** BDDパッケージ（1.93版）ドキュメント **********
著者: 湊　真一　京都大学　大学院情報学研究科
最新更新日: 2021.12.06
**********************************************************

このパッケージはBDDの基本操作を行うＣ言語の関数ライブラリである。

・本プログラムは、32ビットまたは64ビットの計算機で動作する。（コン
　パイル時に、オプションB_64を指定すると64ビットモードとなる）

・各操作はＣ言語の関数呼び出しにより実行される。
  関数等の宣言部は、bddc.hにあるので、includeすること。
  プログラム本体はbddc.cにある。

・入力変数番号(VarID)は1から始まるunsigned int型（bddvar型）の
　整数で識別する（0は定数を表す）。VarIDの最大値はbddvarmaxで
　参照される。デフォルトは65535(16ビット)。
  
・各VarIDごとにBDDでの上下の順位(level)の情報を保持している。
　Levelもまた1から始まるbddvar型の整数で識別する。大きい数値
　ほど上位の変数を表す（BDDの根に近く、先に展開される）。VarIDを
　何も指定せずに生成した場合はVarIDと同じ値のlevelを持つ。

・論理演算結果のBDDは、32ビット（または64ビット）のunsigned int
 （bddp型）のインデックスで返される。BDDは論理関数に対して一意で
　あり、インデックスの値もBDDに対して一意である。したがって、２つ
　の論理演算結果が等価であるかどうかは、演算結果のインデックスの値
　が同じかどうかを比較することで行える。

  bddp f, g
  ......
  if(f == g) 一致
  if(f != g) 不一致

  ただしインデックスの大小比較（f > g）は意味を持たない。

・BDDのインデックスのビット構造は以下の通りである
ビット幅32の場合
ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC
ビット幅64の場合（下位40ビットを使用）
000000000000000000000000ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC
A: 節点IDか定数値かを区別するフラグ。0:節点ID　1:定数値
B: （A=0の場合）節点番号を表す。
　 （A=1の場合）BCを合わせて定数値を表す。
　　　　　　　　通常の論理関数の場合、最下位ビットC以外は常に0。
C: 否定枝を表すフラグ。定数値の場合は奇数偶数を表す。

・BDDの節点情報を格納する記憶領域のデータ構造を以下に示す。
ビット幅32の場合
Node.f0_32  ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC 0枝のBDDインデックス
Node.f1_32  ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC 1枝のBDDインデックス
Node.nx_32  00BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB N:次の節点番号（記憶管理用）
Node.varrfc RRRRRRRRRRRRRRRRVVVVVVVVVVVVVVVV R:参照カウンタ V:変数番号

ビット幅64の場合
Node.f0_32  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC 0枝のBDDインデックス
Node.f1_32  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC 1枝のBDDインデックス
Node.nx_32  BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB N:次の節点番号（記憶管理用）
Node.varrfc RRRRRRRRRRRRRRRRVVVVVVVVVVVVVVVV R:参照カウンタ V:変数番号
Node.f0_h8  ABBBBBBB　0枝のBDDインデックス（上位8ビット）
Node.f1_h8  ABBBBBBB　1枝のBDDインデックス（上位8ビット）
Node.nx_h8  00BBBBBB　N:次の節点番号（記憶管理用）（上位8ビット）

・本プログラムでは、各BDDの参照回数を記憶するカウンタ（参照
　カウンタ）を用いて記憶管理を行っている。BDDをコピーする際には、
　インデックスを直接代入せず、必ず bddcopy() を使用する。また、不要
　になった変数は、bddfree() にて解放することにより、記憶の再利用が
　行われる。

・論理演算中に記憶あふれが発生した場合は、その演算を行う前の
　状態に戻し、bddnullを返す。それ以外のエラーが発生した場合は、
　エラーメッセージを出力した後、異常終了する。なお、関数の引数に
　bddnullを与えた場合には、基本的に何もしないでbddnullを返す。

・本プログラムでは、組合せ集合を表す Zero-suppressed BDD (ZBDD)の
　処理も行う。ZBDDとBDDの節点は内部で区別されている。ZBDD向けの
　演算の引数にBDDの節点を与えた場合（またはその逆も）エラーを検出し
　異常終了する。ちなみに内部での区別の仕方であるが，BDD/ZBDDでは，
  0枝側は否定枝にはならないという性質があるため，基本的にf0_32の
  最下位ビットは0になっているはずである．そこで，本来0であるべき
  最下位ビットが1になっていたらZBDD節点であることを示している。

***** 定数マクロ *****

bddvarmax  入力変数番号の最大値（通常 65535）
bddfalse   恒偽関数を指すBDDインデックス値（0x80000000）
bddtrue	   恒真関数を指すBDDインデックス値（0x80000001）
bddnull	   エラーを意味するBDDインデックス値（通常0x7FFFFFFF）
bddempty   ZBDDの空集合を表すBDDインデックス値（= bddfalse）
bddsingle  ZBDDの単位元集合を表すBDDインデックス値（= bddtrue）


***** 関数 *****

---------- [1] 初期設定・入力変数番号設定 ----------

extern int bddinit(bddp initsize, bddp limitsize)

処理系を初期化し、メモリの確保を行う。プログラムの最初に必ず実行しな
ければならない。initsizeで、最初にメモリを確保するBDD節点数を指定す
る。以後、演算中にメモリを使い切った場合は、自動的にメモリの再確保が
行われる。再確保毎に節点数は 4倍に拡大される。拡大の上限は、limitsize
によって指定できる。使用節点数がlimitsizeに達したときは、メモリの再
確保はそれ以上行われず、ガベジコレクションが起動され、bddfree()により
解放された空き節点が回収される。initsizeは、256より小さい値を指定した
場合は強制的に256に設定される。initを下回る値をlimitに指定した場合は、
強制的にlimitはinitと同じ値に設定される。適切なlimit値は計算機の
メモリ容量に依存する。（32ビットマシンでは1節点当たり約25バイト、
62ビットマシンでは約35バイト必要とする。）bddinit()による初期化が
正常に行われた場合には、関数の値として0を返し、メモリ確保に失敗した
場合1を返す。bddinit()を複数回実行すると、前回の内容がクリアされ、
再度初期化される。

extern bddvar bddnewvar(void)

新しい入力変数を１つ生成し、その変数番号(VarID)を返す。VarIDは1から
始まる整数で、bddnewvar()またはbddnewvaroflev()を1回実行するごとに
1ずつ大きな値が返る。生成した変数のBDD展開順位(level)は、VarIDと
同じ値となる。変数の個数が最大値bddvarmaxを超えるとエラーを出力して
異常終了する。

extern bddvar bddnewvaroflev(bddvar lev)

新しい入力変数を１つ生成し、その変数番号(VarID)を返す。VarIDは1から
始まる整数で、bddnewvar()またはbddnewvaroflevを1回実行するごとに]
1ずつ大きな値が返る。生成した変数のBDD展開順位(level)は、引数levで
指定した値となる。実行時に順位levの変数がすでに存在していた場合は、
lev以上の変数を１つずつ上にずらして（levelを１ずつ増加させ）、空いた
ところに新しい変数を挿入する。引数levは1以上かつ「関数実行直前の変数の
個数＋１」以下でなければならない。そうでなければエラーを出力して異常終了
する。変数の個数が最大値bddvarmaxを超えるとエラーを出力して異常終了する。

extern bddvar bddlevofvar(bddvar v)

引数vで指定した変数番号(VarID）のBDD展開順位(level)を返す。引数vは
1以上かつ「現在の変数の個数」以下でなければならない。そうでなければ
エラーを出力して異常終了する。

extern bddvar bddvaroflev(bddvar lev)

引数levで指定したBDD展開順位(level)を持つ変数番号(VarID)を返す。
引数levは1以上かつ「現在の変数の個数」以下でなければならない。
そうでなければエラーを出力して異常終了する。

extern bddvar bddvarused(void)

現在の入力変数の個数を返す。


---------- [2] 基本的な論理演算 ----------

extern bddp   bddprime(bddvar v)

変数番号vの入力変数に関する単項関数を表すBDDを作り、それを指す
インデックスを返す。すでに同じ BDD が存在していれば共有し、参照カ
ウンタの値を１増やす。引数vは1以上かつ「現在の変数の個数」以下で
なければならない。実行中に記憶あふれを起こした場合は、bddnullを返
す。不当な引数を与えた場合は、エラーを出力し異常終了する。この演算
はZBDDではない通常のBDDを生成する。ZBDD向け処理には利用できない。

extern bddvar bddtop(bddp f)

fが指すBDDの最上位の節点の変数番号(VarID)を返す。返すのはBDD
展開順位の値(level)ではなくその値を持つ変数のVarIDであることに注意。
fの参照カウンタの値は変化しない。fが定数関数の場合は0を返す。
引数にbddnullを与えた場合は0を返す。不当な引数（BDDを正しく指し
ていない等）を与えた場合はエラーを出力し異常終了する。この演算はBDD,
ZBDD共に利用可能。

extern bddp   bddcopy(bddp f)

fが指すBDDをコピーする。すなわち、参照カウンタの値を１増やし、
fそのものを返す。bddnullを与えた場合は、bddnullを返す。不当な引数
（BDDを正しく指していない等）を与えた場合は、エラーを出力し異常終了
する。この演算はBDD,ZBDD共に利用可能。

extern bddp   bddnot(bddp f)

fの否定を表すBDDを作り、それを指すインデックスを返す。「否定枝」
を使用しているため、節点数は増加せず、fの参照カウンタの値を１増やす
だけで、定数時間で結果を返す。bddnulを与えた場合はbddnullを返す。
不当な引数（BDDを正しく指していない等）を与えた場合は、エラーを
出力し異常終了する。この演算はZBDDでは定義されていないため、fが
ZBDDを指していた場合はエラーを出力し異常終了する。

extern bddp   bddand(bddp f, bddp g)

fとgの論理積を表すBDDを作り、それを指すインデックスを返す。計算
結果と同じBDDがすでに存在していれば共有し、参照カウンタの値を１
増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラーを
出力し異常終了する。

extern bddp   bddor(bddp f, bddp g)

fとgの論理和を表すBDDを作り、それを指すインデックスを返す。計算
結果と同じBDDがすでに存在していれば共有し、参照カウンタの値を１
増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラーを
出力し異常終了する。

extern bddp   bddxor(bddp f, bddp g)

fとgの排他的論理和を表すBDDを作り、それを指すインデックスを返す。
計算結果と同じBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラーを
出力し異常終了する。

extern bddp   bddnand(bddp f, bddp g)

fとgの論理積の否定を表すBDDを作り、それを指すインデックスを返す。
計算結果と同じBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラーを
出力し異常終了する。

extern bddp   bddnor(bddp f, bddp g)

fとgの論理和の否定を表すBDDを作り、それを指すインデックスを返す。
計算結果と同じBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラーを
出力し異常終了する。

extern bddp   bddxnor(bddp f, bddp g)

fとgの排他的論理和の否定を表すBDDを作り、それを指すインデックス
を返す。計算結果と同じBDDがすでに存在していれば共有し、参照カウン
タの値を１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。
引数にbddnullを与えた場合は、bddnullを返す。不当な引数（BDDを正し
く指していない等）を与えた場合は、エラーを出力し異常終了する。この
演算はZBDDでは定義されていないため、f,gがZBDDを指していた場合は
エラーを出力し異常終了する。

extern bddp   bddat0(bddp f, bddvar v)

fが指すBDDに対して、変数番号vの入力変数に0を代入したときのBDD
を作り、それを指すインデックスを返す。計算結果と同じBDDがすでに
存在していれば共有し、参照カウンタの値を１増やす。実行中に記憶あふ
れを起こした場合は、bddnullを返す。引数にbddnullを与えた場合は、
bddnullを返す。不当な引数（BDDを正しく指していない等）を与えた場合
は、エラーを出力し異常終了する。この演算はZBDDでは定義されていない
ため、fがZBDDを指していた場合はおかしな計算をする可能性がある。

extern bddp   bddat1(bddp f, bddvar v)

fが指すBDDに対して、変数番号vの入力変数に1を代入したときのBDD
を作り、それを指すインデックスを返す。計算結果と同じBDDがすでに
存在していれば共有し、参照カウンタの値を１増やす。実行中に記憶あふ
れを起こした場合は、bddnullを返す。引数にbddnullを与えた場合は、
bddnullを返す。不当な引数（BDDを正しく指していない等）を与えた場合
は、エラーを出力し異常終了する。この演算はZBDDでは定義されていない
ため、fがZBDDを指していた場合はおかしな計算をする可能性がある。


---------- [3] 記憶管理・表示 ----------

extern void   bddfree(bddp f)

fが指すBDDがもはや不要であることを宣言する。すなわち、参照カウンタ
の値を１減らす。定数関数の場合は何もしない。fが指していたBDDは、
ガベジコレクションが起動されるまでは、回収されずに残っている。
引数に bddnullを与えた場合は、何もしない。この演算はBDD,ZBDD共に
利用可能。

extern bddp   bddused(void)

現在使用中の総節点数を返す。bddfree() によって解放された節点も、
回収されるまでは使用中として数えるため、正確な節点数を知るには、
直前に bddgc()を実行（ガベジコレクション起動）する必要がある。

extern int    bddgc(void)

強制的にガベジコレクション（不要な節点の回収）を行う。bddgc()を陽に
起動しなくても、記憶が足りなくなった場合には自動的に起動される。
ガベジコレクションで空き節点が回収された場合は 0 を返し、空き節点が
１個も見つからなかった場合は 1 を返す。

extern bddp   bddsize(bddp f)

fが指すのBDDの節点数を返す。参照カウンタの値は変化しない。
引数にbddnullを与えた場合は、0を返す。不当な引数（BDDを正しく
指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はBDD,ZBDD共に利用可能。

extern bddp   bddvsize(bddp *p, int lim)

bddp型の配列p[]（配列長の上限lim）により与えられた複数のBDDの節点数を返す。
複数のBDDに共通に含まれる節点は重複して数えない。参照カウンタの値は変化しない。
配列の要素としてbddnullが出現したら、その直前で配列が終了しているとする。
bddnullが出現しなければ配列長はlimまでとする。配列の記憶領域はあらかじめ
確保されているものとする。不当な引数を与えた場合はエラーを出力し異常終了する。
この演算はBDD,ZBDD共に利用可能。

extern void   bddexport(FILE *strm, bddp *p, int lim)

bddp型の配列p[]（配列長の上限lim）により与えられた複数のBDDの構造を、
strmで指定するファイルに出力する。配列の要素としてbddnullが出現したら、
その直前で配列が終了しているとする。bddnullが出現しなければ配列長は
limまでとする。配列の記憶領域はあらかじめ確保されているものとする。
不当な引数を与えた場合はエラーを出力し異常終了する。
この演算はBDD,ZBDD共に利用可能。

extern int   bddimport(FILE *strm, bddp *p, int lim)

strmで指定するファイルからBDDの構造を読み込み、bddp型の配列p[]（配列長の上限lim）に格納する。読み込んだBDD配列の要素数の１つ先の要素にbddnullを書き込む。
ただし、ファイルに書かれているデータの配列長がlimより大きいときはlimまで
しか読まない。配列の記憶領域はあらかじめ確保されているものとする。
ファイルに文法誤りが合った場合等、異常終了時は1を返す。正常時は0を返す。
この演算はBDDでのみ正しく動作する。

extern int   bddimportz(FILE *strm, bddp *p, int lim)

strmで指定するファイルからZBDDの構造を読み込み、bddp型の配列p[]（配列長の上限lim）に格納する。読み込んだZBDD配列の要素数の１つ先の要素にbddnullを書き込む。
ただし、ファイルに書かれているデータの配列長がlimより大きいときはlimまで
しか読まない。配列の記憶領域はあらかじめ確保されているものとする。
ファイルに文法誤りが合った場合等、異常終了時は1を返す。正常時は0を返す。
この演算はZBDDでのみ正しく動作する。

extern void   bddgraph(bddp f)

fが指すBDDのグラフ構造をX-Windowに描画する。引数にbddnullを与
えた場合は、何も表示しない。不当な引数（BDDを正しく指していな
い等）を与えた場合は、エラーを出力し異常終了する。この演算はBDD,ZBDD
共に利用可能。

extern void   bddgraph0(bddp f)

fが指すBDDのグラフ構造をX-Windowに描画する。bddgraph()とほとんど
同じだが、否定枝を使わない場合のグラフ構造を描画する。引数にbddnull
を与えた場合は、何も表示しない。不当な引数（BDDを正しく指して
いない等）を与えた場合は、エラーを出力し異常終了する。
この演算はZBDDでは正しく表示されない。

extern void   bddvgraph(bddp *p, int lim)

bddp型の配列p[]（配列長n）により与えられた複数のBDDののグラフ構造
をX-Windowに描画する。配列の要素としてbddnullが出現したら、その直前で
配列が終了しているとする。bddnullが出現しなければ配列長はlimまでとする。
配列の記憶領域はあらかじめ確保されているものとする。不当な引数
（BDDを正しく指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はBDD,ZBDD共に利用可能。

extern void   bddvgraph0(bddp *p, int n)

bddp型の配列p[]（配列長n）により与えられた複数のBDDののグラフ構造
をX-Windowに描画する。bddvgraph()とほとんど同じだが、否定枝を使わ
ない場合のグラフ構造を描画する。配列の要素としてbddnullが出現したら、
その直前で配列が終了しているとする。bddnullが出現しなければ配列長は
limまでとする。配列の記憶領域はあらかじめ確保されているものとする。
不当な引数（BDDを正しく指していない等）を与えた場合は、
エラーを出力し異常終了する。この演算はZBDDでは正しく表示されない。


---------- [4] その他の論理演算 ----------

extern bddp   bddlshift(bddp f, bddvar shift)

fが指すBDDについて、関係する全ての入力変数を、展開順位(level)が
shiftずつ大きい（上位にある）変数の変数番号(VarID)にそれぞれ書き換えて
BDDを複製し、それを指すインデックスを返す。実行結果において未定義の入力
変数が必要になるようなshiftを与えてはならない。必要な入力変数は
あらかじめ宣言しておくこと。計算結果と同じBDDがすでに存在していれば
共有し、参照カウンタの値を１増やす。実行中に記憶あふれを起こした
場合は、bddnullを返す。引数にbddnullを与えた場合は、bddnull を返す。
shiftに負の値を指定することはできない。不当な引数（BDDを正しく指し
ていない等）を与えた場合は、エラーを出力し異常終了する。この演算は
BDD,ZBDD共に利用可能。

extern bddp   bddrshift(bddp f, bddvar shift)

fが指すBDDについて、関係する全ての入力変数を、展開順位(level)が
shiftずつ大きい（上位にある）変数の変数番号(VarID)にそれぞれ書き換えて
BDDを複製し、それを指すインデックスを返す。実行結果において未定義の入力
変数が必要になるようなshiftを与えてはならない。したがって、fに関係
しない入力変数が下位レベルに用意されていなけらばならない。計算結果と
同じBDDがすでに存在していれば共有し、参照カウンタの値を１増やす。
実行中に記憶あふれを起こした場合は、bddnullを返す。引数にbddnullを
与えた場合は、bddnull を返す。shiftに負の値を指定することはできない。
不当な引数（BDDを正しく指していない等）を与えた場合は、エラーを出力し
異常終了する。この演算はBDD,ZBDD共に利用可能。

extern bddp   bddsupport(bddp f)

fが指すBDDに関係する入力変数（変数の値が0か1かでfの結果が異なる
ような変数）の集合を取り出す。演算結果は、関係する入力変数の論理和
(例: a + b + d）を表すBDDを生成し、それを指すインデックスを返す。
（演算結果のBDDの0枝を順にたどっていくと、求める変数が得られる）
fが定数の場合はbddfalseを返す。不当な引数（BDDを正しく指して
いない等）を与えた場合は、エラーを出力し異常終了する。この演算は
BDD,ZBDD共に利用可能。fがZBDDの場合は演算結果はZBDDの集合和の
形式となる。

extern bddp   bdduniv(bddp f, bddp g)

全称作用演算(universal quantification)。g で指定した入力変数の部分集合
に0,1の定数を代入したときに、どのような0,1の組合せを代入しても常にf=1
となる場合には1を返し、それ以外は0を返すような論理関数のBDDを作り、
それを指すインデックスを返す。入力変数の部分集合の与え方は、bddsupport()
の場合と同様で、変数の論理和の形式とする。（gが指すBDDの0枝を順に
たどっていくと、求める変数が得られる。）計算結果と同じBDDがすでに存在
していれば共有し、参照カウンタの値を１増やす。実行中に記憶あふれを起こした
場合は、bddnullを返す。引数にbddnullを与えた場合は、bddnullを返す。
不当な引数（BDDを正しく指していない等）を与えた場合は、エラーを出力し
異常終了する。この演算はZBDDでは定義されていないため、f,gがZBDDを
指していた場合はエラーを出力し異常終了する。

extern bddp   bddexist(bddp f, bddp g)

存在作用演算(existential quantification)。g で指定した入力変数の部分集合
に0,1の定数を代入したときに、どのような0,1の組合せを代入しても常にf=0
となる場合には0を返し、それ以外は1を返すような論理関数のBDDを作り、
それを指すインデックスを返す。入力変数の部分集合の与え方は、bddsupport()
の場合と同様で、変数の論理和の形式とする。（gが指すBDDの0枝を順に
たどっていくと、求める変数が得られる。）計算結果と同じBDDがすでに存在
していれば共有し、参照カウンタの値を１増やす。実行中に記憶あふれを起こした
場合は、bddnullを返す。引数にbddnullを与えた場合は、bddnullを返す。
不当な引数（BDDを正しく指していない等）を与えた場合は、エラーを出力し
異常終了する。この演算はZBDDでは定義されていないため、f,gがZBDDを
指していた場合はエラーを出力し異常終了する。

extern bddp   bddcofactor(bddp f, bddp g)

g = 0 のときを don't care として f を簡単化した BDD を作り、それを指す
インデックスを返す。計算結果と同じBDDがすでに存在していれば共有し、
参照カウンタの値を１増やす。実行中に記憶あふれを起こした場合は、bddnul
を返す。引数にbddnullを与えた場合は、bddnullを返す。不当な引数（BDDを
正しく指していない等）を与えた場合は、エラーを出力し異常終了する。この
演算はZBDDでは定義されていないため、f,gがZBDDを指していた場合はエラー
を出力し異常終了する。

extern int   bddimply(bddp f, bddp g)

f -> g （f が真ならば g は真）が恒に成り立つかを調べ、恒に成り立つなら 1 を返し、
1つでも反例があれば 0 を返す。実行中に節点数は増加しないので効率が良い。
引数に bddnull を与えた場合は、0 を返す。
不当な引数（BDDを正しく指していない等）を与えた場合は、エラーを出力し
異常終了する。この演算はZBDDでは定義されていないため、f,gがZBDDを
指していた場合はエラーを出力し異常終了する。

extern void   bddwcache(unsigned char op, bddp f, bddp g, bddp h)

演算結果キャッシュへの登録を行う。op は演算の種類を表す。(f op g) =
hという演算結果を登録する。f, g, h は、bddp 型のデータを与える。
引数エラーチェックは行っていないので注意。この演算はBDD,ZBDD共に
利用可能である。なお、1.00版では、op = 0〜9 は、BDD処理系内部の
演算用に、op = 10〜19 は、ZBDD 関係の演算用に使用されており、
20以上の番号が未使用である。複数のアプリケーションで番号が衝突
しないように注意が必要。

extern bddp   bddrcache(unsigned char op, bddp f, bddp g)

演算結果キャッシュを参照する。過去に同じ演算が登録されていれば、
演算結果のBDDへのインデックスを返し、見つからなければbddnull
を返す。ただし、値を返すだけで、参照カウンタの処理は行わないため、
呼び出し側でbddcopy()を実行する必要がある。引数エラーのチェックは
行っていないので注意。


---------- [5] ZBDD用の組合せ集合演算 ----------

extern bddp   bddoffset(bddp f, bddvar v)

fが指すZBDDにおいて、入力変数番号vのアイテムを含まない組合せ要素
を集めた部分集合を表すZBDDを作り、それを指すインデックスを返す。
計算結果と同じZBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。
引数にbddnullを与えた場合は、bddnullを返す。不当な引数（ZBDDを正
しく指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はZBDD専用であるため、fが通常のBDDを指していた場合は
エラーを出力し異常終了する。

extern bddp   bddonset(bddp f, bddvar v)

fが指すZBDDにおいて、入力変数番号vのアイテムを含む組合せ要素
を集めた部分集合を表すZBDDを作り、それを指すインデックスを返す。
計算結果と同じZBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。
引数にbddnullを与えた場合は、bddnullを返す。不当な引数（ZBDDを正
しく指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はZBDD専用であるため、fが通常のBDDを指していた場合は
エラーを出力し異常終了する。

extern bddp   bddonset0(bddp f, bddvar v)

bddonset() とほぼ同じであるが、抽出した部分集合の各要素から
入力変数番号vのアイテムが取り除かれている。
bddchange(bddonset(f, rank), rank) と等価である。
vがfの最上位の変数番号であれば、1-枝の指すBDDをそのまま返す。
計算結果と同じZBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。
引数にbddnullを与えた場合は、bddnullを返す。不当な引数（ZBDDを正
しく指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はZBDD専用であるため、fが通常のBDDを指していた場合は
エラーを出力し異常終了する。

extern bddp   bddchange(bddp f, bddvar v)

fが指すZBDDに含まれる全ての組合せ要素について、入力変数番号vの
アイテムの有無を反転させた組合せ集合を表すZBDDを作り、それを指す
インデックスを返す。計算結果と同じZBDDがすでに存在していれば共有し、
参照カウンタの値を１増やす。実行中に記憶あふれを起こした場合は、
bddnullを返す。引数にbddnullを与えた場合は、bddnullを返す。
不当な引数（ZBDDを正しく指していない等）を与えた場合は、エラーを
出力し異常終了する。この演算はZBDD専用であるため、fが通常のBDDを
指していた場合はエラーを出力し異常終了する。

extern bddp   bddintersec(bddp f, bddp g)

fとgの積集合を表すZBDDを作り、それを指すインデックスを返す。
計算結果と同じZBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（ZBDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDD専用のため、f,gが通常のBDDを指していた場合はエラーを出力し
異常終了する。

extern bddp   bddunion(bddp f, bddp g)

fとgの和集合を表すZBDDを作り、それを指すインデックスを返す。
計算結果と同じZBDDがすでに存在していれば共有し、参照カウンタの値を
１増やす。実行中に記憶あふれを起こした場合は、bddnullを返す。引数に
bddnullを与えた場合は、bddnullを返す。不当な引数（ZBDDを正しく指
していない等）を与えた場合は、エラーを出力し異常終了する。この演算は
ZBDD専用のため、f,gが通常のBDDを指していた場合はエラーを出力し
異常終了する。

extern bddp   bddsubtract(bddp f, bddp g)

fとgの差集合（fに含まれgに含まれていない要素）を表すZBDDを作り、
それを指すインデックスを返す。計算結果と同じZBDDがすでに存在して
いれば共有し、参照カウンタの値を１増やす。実行中に記憶あふれを起
こした場合は、bddnullを返す。引数にbddnullを与えた場合は、bddnull
を返す。不当な引数（ZBDDを正しく指していない等）を与えた場合は、
エラーを出力し異常終了する。この演算はZBDD専用のため、f,gが通常の
BDDを指していた場合はエラーを出力し異常終了する。

extern bddp   bddcard(bddp f)

fが指すZBDDに含まれる要素数を返す。引数に bddnullを与えた場合は、
0を返す。参照カウンタの値は変化しない。不当な引数（ZBDDを正しく
指していない等）を与えた場合は、エラーを出力し異常終了する。
この演算はZBDD専用のため、fが通常のBDDを指していた場合は
エラーを出力し異常終了する。要素数が扱える数の最大値(bddnull)を
超える場合は、その最大値(bddnull)を出力する。

extern char   *bddcardmp16(bddp f, char *s)

fが指すZBDDに含まれる要素数を最大16ワード長までの多倍長整数で
カウントする。結果は16進数文字列としてsから始まる記憶領域に
格納する。sに0(NULL)を与えて実行した場合は、必要なサイズの
文字列領域を確保(malloc)してから結果を格納し、その開始アドレスを
関数値として返す。文字列領域確保に失敗した場合は0(NULL)を返し
終了する。0以外のsを与えた場合は、sをそのまま関数値として返す。
0以外のsを与える場合には、あらかじめ十分な記憶領域（64ビット
PCの場合、最大129文字）を確保しておくこと。そうでない場合の
動作は保証されない。結果の格納場所が確保されていても計算途中に
メモリが不足し計算結果が不明となる場合は、空文字列を格納して
終了する。メモリは足りているが計算結果が表現可能な最大値を
超える場合は、表現可能な最大値をカウント結果として格納して終了する。
引数fに bddnullを与えた場合は0をカウント結果とする。不当な引数
（ZBDDを正しく指していない等）を与えた場合は異常終了する。この演算は
ZBDD専用のため、fが通常のBDDを指していた場合は異常終了する。

extern bddp   bddlit(bddp f)

fが指すZBDDに含まれる組合せに出現するアイテム数の総和を返す。
引数に bddnullを与えた場合は、0を返す。参照カウンタの値は
変化しない。不当な引数（ZBDDを正しく指していない等）を与えた
場合は、エラーを出力し異常終了する。この演算はZBDD専用のため、
fが通常のBDDを指していた場合はエラーを出力し異常終了する。
要素数が扱える数の最大値(bddnull)を超える場合は、その最大値
(bddnull)を出力する。

extern bddp   bddlen(bddp f)

fが指すZBDDに含まれる組合せのうち、最もアイテム数を多く含む組合せを
探し出して、そのアイテム数を返す。引数に bddnullを与えた場合は、0を返す。
参照カウンタの値は変化しない。不当な引数（ZBDDを正しく指していない等）を
与えた場合は、エラーを出力し異常終了する。この演算はZBDD専用のため、
fが通常のBDDを指していた場合はエラーを出力し異常終了する。

extern int bddisbdd(bddp f)

fが指すノードがBDDであるかを判定する。BDDなら1を、ZBDDなら0を返す。
fが定数関数の場合は1を返す。引数にbddnullを与えた場合は0を返す。
不当な引数（BDDを正しく指していない等）を与えた場合はエラーを
出力し異常終了する。この演算はBDD,ZBDD共に利用可能。

extern int bddiszbdd(bddp f)

fが指すノードがZBDDであるかを判定する。ZBDDなら1を、BDDなら0を返す。
fが定数関数の場合は1を返す。引数にbddnullを与えた場合は0を返す。
不当な引数（BDDを正しく指していない等）を与えた場合はエラーを
出力し異常終了する。この演算はBDD,ZBDD共に利用可能。
